- name: create  {{ superset_home }} 
  file: 
     path: '{{  superset_home }}' 
     state: directory
     owner: '{{ superset_user }}'
     group: '{{ superset_group }}'

- name: create  {{ superset_home }}/pythonpath 
  file: 
     path: '{{  superset_home }}/pythonpath' 
     state: directory
     owner: '{{ superset_user }}'
     group: '{{ superset_group }}'

- name: Copy Superset template files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { src: "superset_config.py.j2", dest: "{{ superset_home }}/superset_config.py" }
    - { src: "requirements.txt.j2", dest: "{{ superset_home }}/requirements.txt" }
    - { src: "superset.service.j2", dest: "/etc/systemd/system/superset.service" }       
  notify: restart superset     

- name: Create Python virtual environment
  become_user: "{{ superset_user }}"
  command: "python3 -m venv {{ superset_venv_path }}"
  args:
      creates: "{{ superset_venv_path }}/bin/activate"

- name: install requirement lib
  pip:
     virtualenv:  '{{ superset_venv_path }}'   
     requirements: '{{ superset_home }}/requirements.txt' 
  become: True
  become_user: "{{ superset_user }}"        


- name: Initialize Superset database
  shell: |
        source {{ superset_venv_path }}/bin/activate
        export SUPERSET_CONFIG_PATH={{ superset_home }}/superset_config.py
        export FLASK_APP=superset
        eval "$({{ lockbox_dir }}/decrypt_lockbox_eval.sh)"
        {{ superset_venv_path }}/bin/superset db upgrade
        {{ superset_venv_path }}/bin/superset fab create-admin --username $SUPERSET_ADMIN_USER --firstname Superset --lastname Admin --email admin@superset.com --password $SUPERSET_ADMIN_PASSWORD
        {{ superset_venv_path }}/bin/superset init
  when: >      
     groups['superset'].index(inventory_hostname) == 0
  ignore_errors: true

# Reload systemd to recognize the new service definition
- name: Reload systemd daemon
  systemd:
    daemon_reload: true       
