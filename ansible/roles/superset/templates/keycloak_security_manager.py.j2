import sys
from flask import redirect, request
from flask_appbuilder.security.manager import AUTH_OID
from superset.security import SupersetSecurityManager
from flask_oidc import OpenIDConnect
from flask_appbuilder.security.views import AuthOIDView
from flask_login import login_user
from urllib.parse import quote
from flask_appbuilder.views import ModelView, SimpleFormView, expose
import logging

# Enable logging
logging.basicConfig(level=logging.INFO)

class AuthOIDCView(AuthOIDView):

    @expose('/login/', methods=['GET', 'POST'])
    def login(self, flag=True):
        sm = self.appbuilder.sm
        oidc = sm.oid

        @self.appbuilder.sm.oid.require_login
        def handle_login():
            # Get the user's email from the OIDC provider
            email = oidc.user_getfield('email')
            user = sm.auth_user_oid(email)

            # Log if user is not found
            if user is None or user is False:
                logging.error(f"User not found for email: {email}")
                # Optionally, create the user if not found
                info = oidc.user_getinfo(['preferred_username', 'given_name', 'family_name', 'email'])
                user = sm.add_user(
                    info.get('preferred_username'),
                    info.get('given_name'),
                    info.get('family_name'),
                    info.get('email'),
                    sm.find_role('Gamma')  # You can customize the role here
                )

            if user:
                # Proceed with the login
                login_user(user, remember=False)
                return redirect(self.appbuilder.get_url_for_index)
            else:
                # Log an error if user is still invalid
                logging.error(f"Failed to create or find user for email: {email}")
                return redirect(self.appbuilder.get_url_for_login)

        return handle_login()

    @expose('/logout/', methods=['GET', 'POST'])
    def logout(self):
        oidc = self.appbuilder.sm.oid

        # Perform the OIDC logout
        oidc.logout()
        super(AuthOIDCView, self).logout()
        
        # Redirect URL for the OIDC provider
        redirect_url = request.url_root.strip('/') + self.appbuilder.get_url_for_login
        return redirect(
            oidc.client_secrets.get('issuer') +
            '/protocol/openid-connect/logout?redirect_uri=' + quote(redirect_url)
        )

class OIDCSecurityManager(SupersetSecurityManager):
    authoidview = AuthOIDCView

    def __init__(self, appbuilder):
        super(OIDCSecurityManager, self).__init__(appbuilder)
        if self.auth_type == AUTH_OID:
            # Initialize OIDC
            self.oid = OpenIDConnect(self.appbuilder.get_app)

