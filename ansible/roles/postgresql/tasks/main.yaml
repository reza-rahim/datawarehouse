##### 
- name: Create read-only user if not exists
  shell: >
    psql -U postgres -d postgres -c "DO \$\$ BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '{{ db_user_ro }}')
    THEN CREATE USER {{ db_user_ro }} WITH PASSWORD '{{ db_password_ro }}';
    END IF; END \$\$;"
  become: yes
  become_user: "{{ db_user }}"

- name: Grant USAGE on all schemas for each database
  shell: >
    psql -U postgres -d {{ item }} -c "
    DO \$\$
    DECLARE
        schema_name text;
    BEGIN
        FOR schema_name IN 
            SELECT nspname FROM pg_namespace 
            WHERE nspname NOT IN ('pg_catalog', 'information_schema')
        LOOP
            EXECUTE format('GRANT USAGE ON SCHEMA %I TO {{ db_user_ro }}', schema_name);
        END LOOP;
    END
    \$\$;"
  become: yes
  become_user: "{{ db_user }}"
  loop: 
    - airflow
    - hive
    - keycloak   
    - superset  

- name: Grant SELECT on all tables and views to readonly user
  shell: >
    psql -U postgres -d {{ item }} -c "
    DO \$\$
    DECLARE
        obj record;
    BEGIN
        FOR obj IN
            SELECT schemaname, tablename FROM pg_tables 
            WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
        LOOP
            EXECUTE format('GRANT SELECT ON TABLE %I.%I TO {{ db_user_ro }}', obj.schemaname, obj.tablename);
        END LOOP;

        FOR obj IN
            SELECT schemaname, viewname FROM pg_views 
            WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
        LOOP
            EXECUTE format('GRANT SELECT ON TABLE %I.%I TO {{ db_user_ro }}', obj.schemaname, obj.viewname);
        END LOOP;
    END
    \$\$;"
  become: yes
  become_user: "{{ db_user }}"
  loop: 
    - airflow
    - hive
    - keycloak   
    - superset  


