- name: Add postgres user to ssl-cert group (required for SSL access)
  user:
    name: postgres
    groups: ssl-cert
    append: yes

- name: Add PostgreSQL APT key
  get_url:
      url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
      dest: /tmp/pg.asc

- name: Import PostgreSQL key
  shell: |
      gpg --dearmor < /tmp/pg.asc > /etc/apt/trusted.gpg.d/postgresql.gpg
  args:
      creates: /etc/apt/trusted.gpg.d/postgresql.gpg

- name: Add PostgreSQL APT repository
  apt_repository:
     repo: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
     filename: 'pgdg'
     state: present

- name: Update apt cache
  apt:
     update_cache: yes

- name: Install postgresql
  apt:
     name:
        - postgresql-{{ pg_version }}
        - postgresql-client-16
- name: Ensure PostgreSQL 16 service is enabled and started
  systemd:
    name: postgresql@16-main
    state: started
    enabled: yes          

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: 5432
    host: 127.0.0.1
    delay: 2
    timeout: 30

- name: Set password for PostgreSQL 'postgres' user (hardcoded)
  shell: |
    psql -v ON_ERROR_STOP=1 -c "ALTER USER postgres WITH PASSWORD '{{ db_password }}';"
  become: yes
  become_user: postgres
      

- name: Allow remote access - postgresql.conf
  template:
      src: postgresql.conf.j2
      dest: "{{ pg_conf_path }}/postgresql.conf"
      owner: postgres
      group: postgres
      mode: '0644'
  notify: Restart PostgreSQL

- name: Allow remote access - pg_hba.conf
  template:
     src: pg_hba.conf.j2
     dest: "{{ pg_conf_path }}/pg_hba.conf"
     owner: postgres
     group: postgres
     mode: '0640'
  notify: Restart PostgreSQL    

- name: Create hive database
  postgresql_db:
    name: "{{ hive_db_name }}"
    state: present
  become: yes
  become_user: postgres    

- name: Create keycloak database
  postgresql_db:
    name: "{{ keycloak_db_name }}"
    state: present
  become: yes
  become_user: postgres

- name: Create jupyterhub database
  postgresql_db:
    name: "{{ jupyterhub_db_name }}"
    state: present
  become: yes
  become_user: postgres    

- name: Create airflow database
  postgresql_db:
    name: "{{ airflow_db_name }}"
    state: present
  become: yes
  become_user: postgres    

- name: Create airflow database
  postgresql_db:
    name: "{{ airflow_db_name }}"
    state: present
  become: yes
  become_user: postgres

- name: Create airflow database
  postgresql_db:
    name: "{{ airflow_db_name }}"
    state: present
  become: yes
  become_user: postgres

- name: Create superset database
  postgresql_db:
    name: "{{ superset_db_name }}"
    state: present
  become: yes
  become_user: postgres

- name: disabled (Grant db user access to app db)
  postgresql_privs:
    type: database
    database: "{{ hive_db_name }}"
    roles: "{{ db_user }}"
    grant_option: no
    privs: all
  become: yes
  become_user: "{{ db_user }}"
  when: false  #  disables the task    

- name: Add {{ db_user }} 'hive' to group {{ fuse_group }}
  user:
    name: '{{ db_user }}'
    groups: '{{ fuse_group }}'
    append: yes
    
