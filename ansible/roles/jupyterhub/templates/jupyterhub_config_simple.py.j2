from oauthenticator.generic import GenericOAuthenticator
import os

c = get_config()  #noqa

c.JupyterHub.port = {{ jupyterhub_port }}
c.JupyterHub.proxy_api_ip = "{{ inventory_hostname }}.{{ fqdn }}"
c.JupyterHub.hub_port = {{ jupyterhub_hub_port }}
c.JupyterHub.proxy_api_port = {{ JupyterHub_api_port }}
c.OAuthenticator.tls_verify = False

c.JupyterHub.ssl_cert = '{{ cert_dir }}/{{ server_cert_file_name }}'
c.JupyterHub.ssl_key = '{{ cert_dir }}/{{ server_key_file_name }}'

c.Authenticator.allow_all = True

c.JupyterHub.authenticator_class = GenericOAuthenticator

c.GenericOAuthenticator.client_id='{{ keycloak_jupyter_client_id }}'
c.GenericOAuthenticator.client_secret=os.environ.get('KEYCLOAK_JUPYTER_CLIENT_SECRET')
c.GenericOAuthenticator.token_url = 'https://keyclock.{{ fqdn }}:{{ keycloak_https_port }}/realms/{{ keycloak_devel_realm }}/protocol/openid-connect/token'
c.GenericOAuthenticator.userdata_url = 'https://keyclock.{{ fqdn }}:{{ keycloak_https_port }}/realms/{{ keycloak_devel_realm }}/protocol/openid-connect/userinfo'
c.GenericOAuthenticator.userdata_params = {'state': 'state'}
c.GenericOAuthenticator.username_key = 'preferred_username'
c.GenericOAuthenticator.login_service = 'Keycloak'
c.GenericOAuthenticator.scope = ['openid', 'profile']


# Optional: shutdown idle notebooks automatically (if using culling)
c.MappingKernelManager.cull_idle_timeout = 1800 # Seconds of idle time before shutdown
c.MappingKernelManager.cull_interval = 300       # Check every 10 minutes


c.Spawner.environment = {
        'AWS_ACCESS_KEY_ID': os.environ.get('AWS_ACCESS_KEY_ID'),
        'AWS_SECRET_ACCESS_KEY': os.environ.get('AWS_SECRET_ACCESS_KEY'),
        'SPARK_HOME': os.environ.get('SPARK_HOME'),
        'JAVA_HOME': '{{ java_home_17 }}',
        'PYTHONPATH': '{{ spark_home }}/python'
}

#c.Spawner.notebook_dir='{{ jupyterhub_notebook_dir }}'
