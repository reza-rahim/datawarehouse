---

- name: Check that the spark_install_dir exists
  stat:
      path: '{{ spark_home }}'
  register: stat_result
 
- name : extract spark zip
  unarchive:
     src: "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ spark_file_name }}.tgz"
     dest: /opt
     remote_src: true
     owner: '{{ spark_user }}'
     group: '{{ application_group }}'
  when: not stat_result.stat.exists  


- name: create soft link to /opt/spark   
  file:
     src: '/opt/{{ spark_file_name }}'
     dest: '/opt/spark'
     state: link
     owner: '{{ spark_user }}'
     group: '{{ application_group }}'
  when: not stat_result.stat.exists  

- name: create {{ spark_mnaster_conf_dir }}
  file: 
    path: '{{ spark_mnaster_conf_dir }}'
    state: directory
    owner: '{{ spark_user }}'
    group: '{{ application_group }}'
    

- name: get extra jar files 
  get_url:
     url: '{{ item }}'
     dest: '{{ spark_home }}/jars'
     owner: '{{ spark_user }}'
     group: '{{ application_group }}'
  loop:
     - "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ hadoop_aws_file_name }}" 
     - "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ aws_java_sdk_bundle_file_name }}"      
     - "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ iceberg_spark_runtime_file_name }}" 
     - "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ postgresql_connector_file_name }}" 
     #- "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ awssdk_bundle_filename }}" 
     #- "http://{{ hostvars[groups['repo'][0]]['ansible_host'] }}/download/{{ url_connection_client_filename }}"       
